<html><head><title>
PUB Overview
</title></head><body>
<center><h1>
Python Universe Builder
</h1><h3>
PUB Overview
</h3>
</center>

PUB consists of a set of Python files:
<ul>
	<li><a href="pub.htm">pub.py</a> - defines "global" variables
	<li><a href="pubcore.htm">pubcore.py</a> - defines essential datatypes, 
			functions, and constants
	<li><a href="pubverbs.htm">pubverbs.py</a> - defines standard verbs
	<li><a href="pubobjs.htm">pubobjs.py</a> - defines standard objects
</ul>
In addition, any game will include <a href="mainpgm.htm">a main program</a>
file which sets up the game objects and makes it run.
<P>
There are several key concepts to understand in PUB.  First, it is fully
object-oriented; if you're comfy with that concept, skip to the next paragraph.
Here's the idea: you define a <strong>class</strong>, which is a data structure
with certain attributes (name, description, and so on).  A class also defines
some functions which can be applied to objects of that class.  So far, pretty
simple.  Here's the neat bit: when defining a new class, you don't have to start
from scratch.  Instead, you can declare a <strong>base class</strong>, and your
new class will automatically inherit all the attributes and functions of that
base class.  You just define whatever new properties or different functions
make your new class different from its base.
<p>

There are only two big sets of related classes: <strong>Thing</strong>s and
<strong>Verb</strong>s.  Other PUB classes include <strong>Event</strong>,
which keeps track of some code to be executed in the future; the
<strong>Scheduler</strong>, which maintains a list of Events; the
<strong>Command</strong> class, which stores the actor, verb, and objects
involved in any action; and the <strong>Parser</strong> class, which takes
a string (e.g., typed by the player) and breaks it into Commands.
<P>

Everything you see in the game -- the rooms, the rocks, the characters,
even you (the player) -- is a <strong>Thing</strong>.  A Thing is a
Python object which has attributes such as name, desc, and size, and
methods like GetName(), GetNote(), and so on.  These are all explained
in the <a href="lib/objref.htm#Thing">Thing</a> page of the
<a href="lib/index.htm">library reference</a>.  Two methods especially
deserve note:

<ul><li><strong>PreObj</strong>: this function is called before executing any command
in which this Thing is an object.  It gives the Thing an opportunity to
cancel the command if it's not feasible.<br>

	<li><strong>PostObj</strong>: this function is called after the execution of any
command in which this Thing was an object, but before any output is printed
to the user (and other actors in the game).  It gives the Thing an opportunity
to produce nonstandard output, or take other action which should result from
that command.
</ul>

<P>
<hr>
<h3>What happens when the player types a command?</h3>
Here's the exact sequence of calls that get executed when a player enters
a command.  You'll rarely need to know most of this, but since you insist...

<ul>
<li>The player's input is accepted by <strong>Player.Act()</strong>.  This calls
<ul><li><strong>Actor.DoCommandString()</strong>, which converts the string into a
Command, and passes it to
	<ul><li><strong>Verb.Do()</strong>, which simply schedules a call to
		<li><strong>Verb.Begin()</strong>.  This method does two things:
		<ul><li><strong>Verb.DoPrechecks()</strong>, which calls:
			<ol><li>the <strong>PreWitness()</strong> method of the room (and
					the room containing this room, etc.)
				<li>all the objects' <strong>PreObj()</strong> methods
				<li>the actor's <strong>PreAct()</strong> method, if any
			</ol>If any of these methods return CANCEL, the command is cancelled
			<li>otherwise, a call to <strong>Verb.Finish()</strong> is scheduled
				for some time in the future (determined by 
				<strong>Verb.GetDuration</strong>)
		</ul>
	</ul>
	<li>If there are more commands in the string, this repeats
</ul>
<li>(back in <strong>Player.Act</strong>), <strong>Scheduler.Update()</strong> is called...
	<ul><li>This finds and executes the next event, which may be a call to
		<ul><li><strong>Verb.Finish()</strong>, which updates the game objects, then calls
			<ul><li><strong>Verb.DoPostchecks</strong>, which calls
			<ol><li>the <strong>PostWitness()</strong> method of the room (and
					the room containing this room, etc.)
				<li>all the objects' <strong>PostObj()</strong> methods
				<li>the actor's <strong>PostAct()</strong> method, if any
			</ol>...stopping when any of these methods return CANCEL
			<li>if none CANCEL, it sends standard output
			</ul>
		</ul>
	</ul>
</ul>
</ul>


<hr>
<address>http://www.strout.net/python/pub/doc/overview.html<br>
Last Modified:
5/04/96
. . . . . . <a href="http://www.strout.net/">Joe Strout</a>
. . . <a href="mailto:joe@strout.net">joe@strout.net</a>
</address>

</body></html>

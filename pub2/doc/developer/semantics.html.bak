<html>
<head>
<title>Semantic Language in PUB</title>
</head>
<body bgcolor="#f7e7c7" text="#000000" link="#000030" alink="#808080" vlink="#df3f1f">

<!-- Navigation bar for Static Developer's Docs -->
<table align="center" width="95%" cellspacing="2" cellpadding="5" border="1"  bgcolor="#553311" >
<tr valign="top">
<td align="left" bgcolor="#ffffff" width="150"><a href="../index.html"><img src="nav_logo.png" width="135" height="64" border="0" /></a></td>
<td align="center"><font color="#ffffff"><b>Developer's Documentation</b></font></td>
<td align="right" bgcolor="#ffffff" width="150"><a href="../epydoc/index.html"><img src="nav_devguid.png" width="85" height="64" border="0" /></a></td>
</tr>
</table>
<!-- End of Navigation bar -->

<h1>Semantic or "Concept" Language in PUB 2.x+</h1>
Because we wanted to internationalize PUB, we had to do some serious rethinking about
how the internals of an IF engine should work.  Instead of having objects within PUB
expressing themselves directly in strings of English, therefore, we have altered the system
to separate out the localized communications stage from the internal "semantic" language
used by PUB's core and world model.
<p>
This internal language uses Python objects to represent certain basic concepts common
to all languages -- or at least common to all languages when referring to the limited
knowledge domain of PUB's interactive fiction topological world.  You can think of this
internal language as a kind of <i>lingua franca</i> used within PUB, having it's own
simplified grammar rules.  However, since the mechanism is just ordinary Python objects
passed as messages to each other, there's not really a need for any formal notation.
</p>
<p>
Describing this mechanism, however, will provide a deeper understanding of how PUB
is localized, and how game information is passed, making it easier for you if you
are interested either in writing games for PUB, or working on its engine design.
</p>

<h3>UML Diagram</h3>
<p>
What I can do is provide a UML representation of the objects used in the de-referencing
and communications messages.  This is still pretty incomplete, as I am still working on
this at a conceptual level. My current feeling is that I want to make these objects
subclass directly from the PyParsing parserElement classes, and then add the semantic
dereferencing to that. Alternatively, I could build semantic classes that are generated
factory-style from the syntactical parsing objects.  Either way, a clause moves from being
a string, to a list of string tokens, to identified words, to de-referenced concepts
from the "topoworld" object model within PUB.
</p>
<p>
Anyway, here's my first concept:
</p>
<img src="../image/semantics_uml.png" alt="UML Diagram of Semantics Objects"
        width="800" height="500" border="0" />

<p>
This diagram describes several "enumerated" types, I use an idiom of a class container
with integer objects to represent this. The meaning of the symbols is described below
under the parts-of-speech headings.
</p>

<h4>Language, Meta-Language, Meta-Meta-Language, <i>ad infinitum</i></h4>
As with all discussion of linguistics, which is to say,
"talking about how we talk about talking", the mere recursion creates a lot
of fuss in understanding what's going on, so we have to be extra-explicit in
this document.  In order to clarify this, we need to walk through the parsing
process to see what happens to what you type, and then walk back out to the
generated reports that PUB gives you in response:
<dl>
<dt><b>Input Strings</b></dt>
<dd>
With unicode encodings and other issues, it isn't as trivial as it used to be,
but one way or another, PUB's parser receives one line of characters as input.
</dd>
<dt><b>Tokenization</b></dt>
<dd>
The tokenizing or "lexing" process turns the stream of characters into a stream
of "tokens" or "words" (but in our usage, some "words" may consist only of
punctuation, such as the "conjunction" ","). At this point, though, words are still
just groups of characters.  If the string contains <i>lexical</i> errors (e.g. bad spelling),
it will be rejected at this point, raising a <b>LexicalParsingError</b>.
</dd>
<dt><b>Classification</b></dt>
<dd>
In the next step, actually called "parsing", the words are classified and a data
structure is built up, representing the text.  If the typed text is <i>syntactically</i>
incorrect, it will be rejected at this point with a <b>SyntacticalParsingError</b>.
However, due to syntactical ambiguity, the parser will attempt variant interpretations
of the text before giving up and passing the exception on to the next level.
<ul>
<li>The input may consist of simple sentences (or "clauses"), broken up by "conjunctions"
or "punctuations"</li>
<li>Each clause consists of a "verb phrase" and zero or more "noun phrases".</li>
<li>The verb phrase consists of a verb and zero or more adverbs, which may modify the
impact of the verb (they are represented mathematically using a vector of floating
point numbers, and effectively "fuzzify" the verb).</li>
<li>The noun phrase consists of a "noun word" and various modifiers, including:
adjectives, articles, and particles representing "declension" or "prepositional"
inflections (the original language may have many different ways to express these
concepts, but int the PUB "concept language" they are attributes of the "noun phrase".</li>
</li>
</ul>
</dd>
<dt><b>De-Referencing</b></dt>
<dd>
The next step converts from "syntax" to "semantics", by de-referencing the "verb phrase"
and "noun phrase" objects to the PUB linguistic/topological world model objects that they
represent. This de-referencing is context sensitive, taking into account what the player
can "see" in the game, and the scope of concepts available to him.  If de-referencing
fails, the parser will then raise a <b>SemanticParsingError</b> (although it could use
the same perturbational reinterpretation process to deal with semantic errors that it
uses for syntactical errors).
</dd>
<dt><b>Dispatching</b></dt>
<dd>
After the sentence has been so processed, it is now a list of "Command" objects which can
be executing sequentially to implement the player's move. (It should be noted that in
PUB, when we have non-player agents, they will also get a chance to act, so the players'
commands are not the only ones executed at this point). During the dispatching process,
the actual outcome will be determined -- nouns may not actually allow the verbs in question
to act on them, in which case they will raise some subclass of <b>IFActionError</b>.
</dd>
<dt><b>Reporting</b></dt>
<dd>
Regardless of the outcome, whether through error exceptions or successful completion, a
report "Sentence" object will be passed back to the parser (which is also the language generator
module), by constructing a "statement sentence" in either the "perfective" (action-completed) or
"imperfective" (state-reporting) aspect.  This sentence object references the PUB objects it
refers to, including "noun objects" and "verb objects".
</dd>
<dt><b>Phrase-Generation</b></dt>
<dd>
The sentence object generates a string representation by making calls into the current locale, 
to represent objects using their localized names and appropriate modifiers, and to report the
correct verb with its nearest-matching adverb (or no adverb, depending on the options used).
</dd>
<dt><b>Report</b></dt>
<dd>
The resulting string is then reported back to the terminal (or stdout).
</dd>
</dl>

<h1>Parts of Speech</h1>
Notes about the different parts of speech as understood by PUB.

<a name="NOUN"><h3>Nouns</h3></a>
<p>
Nouns are very important objects in PUB, as they are the conceptual
analog to the "objects" of "object oriented programming".  In most
cases, the code determining the outcome of a game is attached to
noun objects.
</p>
<p>English is very analytic with respect to nouns, and the only
true inflection we use is pluralization (there is also possessive,
but that effectively converts a noun to an adjective).  Pluralization
is a highly diverse area among different languages. Some languages,
such as Chinese and Japanese have no inflected plural, essentially
treating all nouns as "collective" or "ambiguously plural", just like
the English word "sheep".  And as we do with sheep, these languages
use "counters" to specify numbers -- hence you can say "three head of sheep".
</p>
<p>
Other languages have more complex pluralization schemes than ours,
such as Arabic, which has a separate "dual" for specifying <i>two</i>
objects, in addition to the "plural" which means <i>three or more</i>.
And there are other examples.
</p>
<p>
The safest way to localize a plural is to be explicit about the number
of objects (i.e. specify the actual number).  But this is not always
practical, so the plurality state of a noun is allowed to take on
some special values (internally, these are negative numbers, so as
to disambiguate them from literal quantities). Note that using these
values is likely to cause some breakage when the game author and the
game locale are very different languages:
</p>
<a name="ENUM_PLURALS">
<dl>
<dt><b>SING</b>: Singular</dt>
<dd>
Just one object. Same as '1', of course.
</dd>
<dt><b>DUAL</b>: Dual</dt>
<dd>
Just two objects, same as '2'.
</dd>
<dt><b>PLUR</b>: Plural</dt>
<dd>
Three or more objects (may be used for two-or-more if the number isn't known).
</dd>
<dt><b>COLL</b>: Collective or Mass nouns</dt>
<dd>
This is applied to a collective noun, and means that no sensible distinction
between singular and plural is possible, or that the number is effectively
always plural.  When translating from a language which assigns a collective
value to a concept to a language that does not, plural should be assumed (e.g.
hair).  This is also used for liquid or gaseous substances that can't be
counted without specifying a unit.
</dd>
<dt><b>ABST</b>: Abstract</dt>
<dd>
Certain nouns have no meaningful singular or plural state, such as abstract
nouns like "logic" or "north".  For these, the pluralization value "ABST"
is available.
</dd>
</dl>


<a name="VERB"><h3>Verbs</h3></a>
<p>
Verbs represent actions that may be taken on objects by players (or
other agents) in the game.  Verbs interact with <i>interfaces</i>
provided by the nouns.
</p>
<p>
Many languages provide complex inflection on verbs, collectively
called "verb conjugation". This includes inflections for "person"
(who the subject is relative to the speaker), "tense" (position in
time of the verb's action), and sometimes "aspect" (a more complex
idea incorporating uncertainty, duration, and so on -- to be more
specific, you'd have to talk about specific languages).  Fortunately,
in the limited domain of an IF parser we can stick to a few very
widely held concepts, which are represented here:
</p>
<a name="ENUM_VERBTENSES" />
<h5>Verb Tenses</h5>
<dl>
<dt><b>IMP</b>: Imperative</dt>
<dd>
This is the form used in a command. Almost every sentence we parse
will be in this tense/aspect.
</dd>

<dt><b>INT</b>: Interrogative</dt>
<dd>
This is the form used in a question.  This is usually the same as
the PRP form, and I currently have no use for this, although it
could be sanely parsed and dereferenced, AFAICT (as a query about
the topoworld state). We usually use a "look" command to do this
in IF, but a question syntax ought to be possible.
</dd>

<dt><b>PRP</b>: Present Perfective</dt>
<dd>
Often called the "plain present" or just "present" tense.  Most
reports generated from the IF engine will be in this tense. It
indicates a <i>completed</i> action, e.g.: "You <i>hit</i> the nail."
</dd>

<dt><b>PRI</b>: Present Imperfective</dt>
<dd>
In English, we use the "present participle" for this. It indicates
an on-ongoing or state-like action, e.g.: "You <i>are standing</i> on the table."
</dd>
</dl>
<a name="PERSON" />
<h5>Person</h5>
<p>
"Person" is specified by an integer, following the usual linguistic
convention:
</p>
<dl>
<dt><b>1</b>: First person</dt>
<dd>The speaker.  We don't use this much.</dd>

<dt><b>2</b>: Second person</dt>
<dd>The listener. Most reports are in this person as they are describing
what the player is doing.</dd>

<dt><b>3</b>: Third person</dt>
<dd>Another person, not the speaker or listener. We occasionally may use
this to generate reports on the behavior of non-player characters.</dd>

<dt><b>4</b>: Fourth person</dt>
<dd>Surprised? Me too. English doesn't have this, but some Native American
languages (e.g. Ojibwa) do -- it means "yet another person", besides the
third person. In a third-person narrative, in which the protagonist is
described in third person, you would expect "fourth person" to refer to
the people that person interracts with.  I have serious doubts about
where to use this, if at all, but it will remain an allowed value just
in case.
</dd>
</dl>


<a name="ADVB"><h3>Adverbs</h3></a>
Adverbs are defined as members of an "adverb domain" in PUB, which 
verbs can subscribe to to indicate that the domain makes sense in
reference to the verb. Individual adverbs express a modifying numerical
value from "-1" (ameliorating) to  "0" (neutral) to "+1" (exacerbating).
Adverbs which modify other adverbs (such as "very") are not really
interpreted separately, but are combined to form multi-word adverbs,
such as "very very weakly".  The adverb, once dereferenced to a domain
and numerical value pair, is passed to the verb when it is executed,
allowing the verbs action to be further specified. The "neutral" or "0"
adverbial value should match the interpretation of the <i>base</i> verb
without an adverb (but "synonym" verbs may carry an adverbial <i>connotation</i>
which is incorporated by an adverbial value when the synonym is de-referenced
to the base verb: hence to "gently bash" something may be the same as to "hit" it,
and to "strongly hit" it may be the same as "bash".
<p>
This mechanism is useful because in some languages such as English, there
is a very rich variety of synonymous verbs with differing shades of implied
adverbial meaning, whereas in other languages, such as Japanese, there are
few verbs, and such distinctions are carried by adverbs. Since we want to
be language-neutral, we need to allow for this kind of dereferencing.
</p>

<a name="ADJE"><h3>Adjectives</h3></a>
<p>
Adjectives are used in PUB to <i>further specify</i> a noun, in order to
aid in de-referencing it.  Thus, if both a "red button" and a "green button"
are currently visible, we need to examine the adjectives to know which
the player means (or else we need to raise an <b>AmbiguousSemanticsError</b>
to report the problem to the player).
</p>
<p>
We don't do much with adjectives internally. They are really just labels that
are assigned to nouns. In the translation process, we just have to gloss them
to something reasonably close in meaning.
</p>

<a name="DECL"><h3>Declension</h3></a>
Declension of nouns may be expressed in many different ways in different languages,
but the meanings are shared and sensible in the interactive fiction context. The
six-case declension described here is roughly derived from Russian, because it's
the most complete declension I'm aware of -- it's certainly rich enough for our
needs. In all cases, "declension" refers not to the identity of nouns, but rather
their role in the sentence:

<a name="ENUM_DECLENSIONS" />
<dl>
<dt><b>NOM</b>: Nominative case</dt>
<dd>
This is the case for the subject. It is underused in PUB, because the subject is
implicitly the player character (but there are circumstances where it might be needed,
so we include it for completeness).
</dd>
<dt><b>ACC</b>: Accusative case</dt>
<dd>
This is what we call the "direct object" in English, it is the principal object that a verb
is going to act on.
</dd>
<dt><b>DAT</b>: Dative case</dt>
<dd>
A noun towards which an action is directed. In English we usually represent this with the
preposition "to" or "towards".
</dd>
<dt><b>GEN</b>: Genitive case</dt>
<dd>
Opposite of Dative. In English we represent this with the preposition "from".
</dd>
<dt><b>INS</b>: Instrumental case</dt>
<dd>
This is a noun which is used like a tool. In English we say "using" or "with".
</dd>
<dt><b>PRP</b>: Prepositional case</dt>
<dd>
This is a catch-all for spatial and directional information.  We use it to represent or specify
topological relationships when needed.  We set the noun phrase declension to this value to
represent that a topological preposition will be provided.
</dd>
</dl>
<p>
In English, declension is marked by a combination of word-order and "prepositions". The
"explicit declension" model though, is more useful in designing the interaction between
verbs and nouns, though, which is why I've adopted it (TJH), rather than sticking with
English terms.
</p>

<a name="PREP"><h3>Prepositions</h3></a>
<p>
Prepositions are used to represent topological relationships between objects. The concepts
that apply are determined by the topology model used (currently, this will include only
"simple containment" and "brick" models).
</p>

<p>
Note that the English word "preposition" comes from "pre-" + "position" refering to
the way the word relates to the noun it modifies. We don't care about this, and don't 
draw a distinction between "preposition", "postposition", or "particle".  The point is
that prepositions give us information about where in the topo-world an action is to
take place.
</p>

<p>
Like adjectives, prepositions are basically just labels, but they have a significance
to the "topology model" that the noun inherits from. If it is a "simple container", then
"in", "on", etc will all translate to a label like "within" which means that the place
the action refers to is the contents of the given Noun.  So if you
"put the hammer in the cabinet", then the hammer's location will be changed to the
contents of the cabinet.  For more complex topologies, there may be more than one
kind of "containment" (e.g. "within" versus "on top of"), or the topology may refer
to ordering within the parent container (as with "brick model topology", which essential
describes the room as a collection of XYZ-sorted objects) [Yeah, I know, we don't have
a brick-model yet -- but we could. I think I need to write an article on topology
models, but that'd be while I'm writing code to do it.].
</p>

<a name="ARTL"><h3>Articles</h3></a>
Indo-European languages frequently include a concept of "article" words, such as the
English "a", "an", and "the". These words draw a distinction between whether a particular
instance of a noun is meant, or any instance, or the noun concept in the abstract. Since
this idea is not particularly easy to model, and many languages don't use it, we ignore
articles on parsing (they are noted, but not used), and specify them using a small set
of options on output (which are available to the game designer and noun-object author):

<a name="ENUM_ARTICLES" />
<dl>
<dt><b>INDEF</b>: 'a'</dt>
<dd>Indefinite -- any tangible instance of the object.</dd>
<dt><b>UNDEF</b>: ''</dt>
<dd>Undefined -- this is a bare word in English, and leaves representation to the default case.</dd>
<dt><b>DEFIN</b>: 'the'</dt>
<dd>Definite -- a particular object is intended.</dd>
<dt><b>QUANT</b>: 'some'</dt>
<dd>Quantity -- a quantity of a collective or uncountable tangible substance is intended.</dd>
<dt><b>ABSTR</b>: ''</dt>
<dd>Abtract -- we are talking about an object "in the abstract", so definiteness doesn't really make
sense. We don't distinguish this from "undefined" in English, but doing so will result in better
localization for languages such as Romance languages which have different rules about the articles
used for abstracts.</dd>
</dl>

<a name="VOCABULARY"><h1>Vocabulary</h1></a>
The "Vocabulary" is an object defined in the localization process for PUB which accumulates the
language-specific representations of the semantic concepts above.  As with any glossing project,
localizing the PUB IF engine will involve some compromises from the language: we can't always make
the same fine distinctions that a native speaker would normally make in speaking.  This is not
a new problem of localization though -- IF engines have always had a somewhat artificial tone in
their generated and parsed expressions (how often do you use sentences like "get all" and "n" in
everyday English?).  It's really just an acknowledgement that this artificiality will exist in
other localizations as well as English.

<p>
The internal representation of the vocabulary object is somewhat complicated by internal checks
and tests for ambiguity, so it's awkward to use Python as the format for loading vocabulary
information. Also, the representation of many languages requires Unicode and/or international
encodings, and this is also awkward to do in Python.  For these reasons, we've settled on an
XML-based format for representing locale vocabularies.
</p>

[this is stylistically wrong -- in *this* document we should be talking about the semantic
vocabulary objects, not localized representations. This means the labeled symbols within
PUB should be talked about: NounPhrase, VerbPhrase, Sentence, Adverb, etc. objects and the
registries used to collect and find them.]

</body>
</html>

